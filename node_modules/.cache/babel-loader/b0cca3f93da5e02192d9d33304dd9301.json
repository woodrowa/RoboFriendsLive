{"ast":null,"code":"var _jsxFileName = \"/Users/awoodrow/React Projects/robofriends/src/components/ErrorBoundary.js\";\nimport React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    //props is to allow access to this.props in the\n    //constructor which we end up not needing\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  } //like the try catch block in javascript\n  //if anything errors out it will run this lifecycle hook\n  //if this method gets triggered it will set hasError to true\n\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      hasError: true\n    });\n  } //we're gonna wrap ErrorBoundary around a component\n  //such as CardList component\n  //if component fails, we can catch in ErrorBoundary\n\n\n  render() {\n    //if this.state.hasError is true and there is an error\n    if (this.state.hasError) {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 20\n        }\n      }, \"Oooops. That is not good.\");\n    } //props.children is anything in between ErrorBoundary like CardList in this case\n\n\n    return this.props.children;\n  }\n\n}\n\nexport default ErrorBoundary;","map":{"version":3,"sources":["/Users/awoodrow/React Projects/robofriends/src/components/ErrorBoundary.js"],"names":["React","Component","ErrorBoundary","constructor","props","state","hasError","componentDidCatch","error","errorInfo","setState","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AAClCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA;AACA,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAGH,GARiC,CAUlC;AACA;AACA;;;AACAC,EAAAA,iBAAiB,CAACC,KAAD,EAAQC,SAAR,EAAmB;AAChC,SAAKC,QAAL,CAAc;AAAEJ,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACH,GAfiC,CAiBlC;AACA;AACA;;;AACAK,EAAAA,MAAM,GAAG;AACL;AACA,QAAG,KAAKN,KAAL,CAAWC,QAAd,EAAuB;AACnB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACH,KAJI,CAKL;;;AACA,WAAO,KAAKF,KAAL,CAAWQ,QAAlB;AACH;;AA3BiC;;AA8BtC,eAAeV,aAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        //props is to allow access to this.props in the\n        //constructor which we end up not needing\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    //like the try catch block in javascript\n    //if anything errors out it will run this lifecycle hook\n    //if this method gets triggered it will set hasError to true\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true })\n    }\n\n    //we're gonna wrap ErrorBoundary around a component\n    //such as CardList component\n    //if component fails, we can catch in ErrorBoundary\n    render() {\n        //if this.state.hasError is true and there is an error\n        if(this.state.hasError){\n            return <h1>Oooops. That is not good.</h1>\n        }\n        //props.children is anything in between ErrorBoundary like CardList in this case\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;"]},"metadata":{},"sourceType":"module"}