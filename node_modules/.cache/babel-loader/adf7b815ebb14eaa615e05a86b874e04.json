{"ast":null,"code":"import _classCallCheck from\"/Users/awoodrow/React Projects/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/awoodrow/React Projects/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/awoodrow/React Projects/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/awoodrow/React Projects/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import CardList from\"../components/CardList\";import SearchBox from\"../components/SearchBox\";import Scroll from\"../components/Scroll\";import\"./App.css\";//Needs to be a class and extend Component when dealing with state\n//in a non-state component you just return something\n//in a stateful component you render something\n//any component using state has the class syntax\n//what we call a smart component since it uses state\nvar App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);//calls the constructor of component\n_this.onSearchChange=function(event){//anytime you make your own methods on a component use arrow function\n//without the arrow function this would refer to the input where the event takes place\n//makes sure the this value refers to where it was created; App in this case\n//with the event we always have event.target.value\nconsole.log(event.target.value);//this is how we set state\n_this.setState({searchfield:event.target.value});};_this.state={//two states: robots and searchfield\nrobots:[],searchfield:''};console.log(\"constructor\");//these are the things that can change within our app\n//usually live in the parent component\n//state is passed down as props to components\n//the state is passed down as props to CardList\nreturn _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;//no arrow function because this method is part of react\n//robots from javascript file\n//we can fetch the user list from this url and set the state of robots to this list\nfetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(users){return _this2.setState({robots:users});});//we set te state of robots to the users list from the url\n//fetch is a method on the window object and comes with all browsers\n//window.fetch in browser console\nconsole.log(\"componentDidMount\");}},{key:\"render\",//anytime input changes we set the state of where the event was triggered\n//which is SearchBox.js input\n//always has a render function that has to return something\n//you have to use this.onSearchChange since this is an object\nvalue:function render(){//we can destructure this.state and just refer to robots and searchfield\nvar _this$state=this.state,robots=_this$state.robots,searchfield=_this$state.searchfield;//these components that are just pure functions can just render\n//we use the filter function to iterate over robots array which is in state\n//return all robots that match SearchBox input which is in this.state.searchfield\n//filter robot state to include what's in the searchfield\n//and we pass filtered robots instead\n//is an array\n//we destructured into robots and searchfield but it can also be this.state.robots and this.state.searchfield\n//this is cleaner\nvar filteredRobots=robots.filter(function(robot){//each item we filter through is a robot but can be any word\nreturn robot.name.toLowerCase().includes(searchfield.toLowerCase());});console.log(\"render\");//render() will run anytime there is a change in state which triggers an update\n//it goes from an empty array to having the state set with robots list\n//everytime there is an onChange on the input of SearchBox it let's the App.js know to run the onSearchChange function\n//then updates the state of the searchfield to whatever we typed\nif(this.state.robots.length===0){//if the fetch is taking a long time to get the list we can show a loading h1 when the list is empty or 0\n//this could be a loading bar in a real app\nreturn/*#__PURE__*/React.createElement(\"h1\",null,\"Loading\");}else{return/*#__PURE__*/React.createElement(\"div\",{className:\"tc\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"f1\"},\"RoboFriends\"),/*#__PURE__*/React.createElement(SearchBox,{searchChange:this.onSearchChange}),/*#__PURE__*/React.createElement(Scroll,null,/*#__PURE__*/React.createElement(CardList,{robots:filteredRobots})));}}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/awoodrow/React Projects/robofriends/src/containers/App.js"],"names":["React","Component","CardList","SearchBox","Scroll","App","onSearchChange","event","console","log","target","value","setState","searchfield","state","robots","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":"onBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAO,WAAP,CAEA;AACA;AACA;AACA;AACA;GACMC,CAAAA,G,0FACF,cAAc,qCACV,wBAAQ;AADE,MA2BdC,cA3Bc,CA2BG,SAACC,KAAD,CAAW,CACxB;AACA;AACA;AACA;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB,EACA;AACA,MAAKC,QAAL,CAAc,CAACC,WAAW,CAAEN,KAAK,CAACG,MAAN,CAAaC,KAA3B,CAAd,EACH,CAnCa,CAEV,MAAKG,KAAL,CAAa,CACT;AACIC,MAAM,CAAE,EAFH,CAGLF,WAAW,CAAE,EAHR,CAAb,CAKAL,OAAO,CAACC,GAAR,CAAY,aAAZ,EACA;AACA;AACA;AACA;AAXU,aAYb,C,6EAEmB,iBAChB;AACA;AACA;AACAO,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACU,SAAAC,QAAQ,QAAGA,CAAAA,QAAQ,CAACC,IAAT,EAAH,EADlB,EAEKF,IAFL,CAEU,SAAAG,KAAK,QAAI,CAAA,MAAI,CAACR,QAAL,CAAc,CAAEG,MAAM,CAAEK,KAAV,CAAd,CAAJ,EAFf,EAGA;AACA;AACA;AACAZ,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACH,C,gBAWD;AACA;AAEA;AACA;uBACS,CACL;AADK,gBAE2B,KAAKK,KAFhC,CAEGC,MAFH,aAEGA,MAFH,CAEWF,WAFX,aAEWA,WAFX,CAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAMQ,CAAAA,cAAc,CAAGN,MAAM,CAACO,MAAP,CAAc,SAAAC,KAAK,CAAE,CACxC;AACA,MAAOA,CAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCb,WAAW,CAACY,WAAZ,EAAlC,CAAP,CACH,CAHsB,CAAvB,CAIAjB,OAAO,CAACC,GAAR,CAAY,QAAZ,EACA;AACA;AACA;AACA;AACA,GAAG,KAAKK,KAAL,CAAWC,MAAX,CAAkBY,MAAlB,GAA6B,CAAhC,CAAkC,CAC9B;AACA;AACA,mBAAO,wCAAP,CACH,CAJD,IAIO,CACH,mBACI,2BAAK,SAAS,CAAC,IAAf,eACI,0BAAI,SAAS,CAAC,IAAd,gBADJ,cAEI,oBAAC,SAAD,EAAW,YAAY,CAAE,KAAKrB,cAA9B,EAFJ,cAGI,oBAAC,MAAD,mBACI,oBAAC,QAAD,EAAU,MAAM,CAAEe,cAAlB,EADJ,CAHJ,CADJ,CASH,CACJ,C,iBA7EapB,S,EAgFlB,cAAeI,CAAAA,GAAf","sourcesContent":["import React, {Component} from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\"\nimport \"./App.css\"\n\n//Needs to be a class and extend Component when dealing with state\n//in a non-state component you just return something\n//in a stateful component you render something\n//any component using state has the class syntax\n//what we call a smart component since it uses state\nclass App extends Component {\n    constructor() {\n        super();//calls the constructor of component\n        this.state = {\n            //two states: robots and searchfield\n                robots: [],\n                searchfield: ''\n        };\n        console.log(\"constructor\");\n        //these are the things that can change within our app\n        //usually live in the parent component\n        //state is passed down as props to components\n        //the state is passed down as props to CardList\n    }\n\n    componentDidMount() {\n        //no arrow function because this method is part of react\n        //robots from javascript file\n        //we can fetch the user list from this url and set the state of robots to this list\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(users => this.setState({ robots: users }));\n        //we set te state of robots to the users list from the url\n        //fetch is a method on the window object and comes with all browsers\n        //window.fetch in browser console\n        console.log(\"componentDidMount\");\n    }\n\n    onSearchChange = (event) => {\n        //anytime you make your own methods on a component use arrow function\n        //without the arrow function this would refer to the input where the event takes place\n        //makes sure the this value refers to where it was created; App in this case\n        //with the event we always have event.target.value\n        console.log(event.target.value);\n        //this is how we set state\n        this.setState({searchfield: event.target.value});\n    };\n    //anytime input changes we set the state of where the event was triggered\n    //which is SearchBox.js input\n\n    //always has a render function that has to return something\n    //you have to use this.onSearchChange since this is an object\n    render() {\n        //we can destructure this.state and just refer to robots and searchfield\n        const { robots, searchfield } = this.state;\n        //these components that are just pure functions can just render\n        //we use the filter function to iterate over robots array which is in state\n        //return all robots that match SearchBox input which is in this.state.searchfield\n        //filter robot state to include what's in the searchfield\n        //and we pass filtered robots instead\n        //is an array\n        //we destructured into robots and searchfield but it can also be this.state.robots and this.state.searchfield\n        //this is cleaner\n        const filteredRobots = robots.filter(robot=>{\n            //each item we filter through is a robot but can be any word\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        console.log(\"render\");\n        //render() will run anytime there is a change in state which triggers an update\n        //it goes from an empty array to having the state set with robots list\n        //everytime there is an onChange on the input of SearchBox it let's the App.js know to run the onSearchChange function\n        //then updates the state of the searchfield to whatever we typed\n        if(this.state.robots.length === 0){\n            //if the fetch is taking a long time to get the list we can show a loading h1 when the list is empty or 0\n            //this could be a loading bar in a real app\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}