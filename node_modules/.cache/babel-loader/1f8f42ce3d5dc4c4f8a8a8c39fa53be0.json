{"ast":null,"code":"var _jsxFileName = \"/Users/awoodrow/React Projects/robofriends/src/containers/App.js\";\nimport React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\"; //Needs to be a class and extend Component when dealing with state\n//in a non-state component you just return something\n//in a stateful component you render something\n//any component using state has the class syntax\n//what we call a smart component since it uses state\n\nclass App extends Component {\n  constructor() {\n    super(); //calls the constructor of component\n\n    this.onSearchChange = event => {\n      //anytime you make your own methods on a component use arrow function\n      //without the arrow function this would refer to the input where the event takes place\n      //makes sure the this value refers to where it was created; App in this case\n      //with the event we always have event.target.value\n      console.log(event.target.value); //this is how we set state\n\n      this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    this.state = {\n      //two states: robots and searchfield\n      robots: [],\n      searchfield: ''\n    };\n    console.log(\"constructor\"); //these are the things that can change within our app\n    //usually live in the parent component\n    //state is passed down as props to components\n    //the state is passed down as props to CardList\n  }\n\n  componentDidMount() {\n    //no arrow function because this method is part of react\n    //robots from javascript file\n    //we can fetch the user list from this url and set the state of robots to this list\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({\n      robots: users\n    })); //we set te state of robots to the users list from the url\n    //fetch is a method on the window object and comes with all browsers\n    //window.fetch in browser console\n\n    console.log(\"componentDidMount\");\n  }\n\n  //anytime input changes we set the state of where the event was triggered\n  //which is SearchBox.js input\n  //always has a render function that has to return something\n  //you have to use this.onSearchChange since this is an object\n  render() {\n    //we can destructure this.state and just refer to robots and searchfield\n    const {\n      robots,\n      searchfield\n    } = this.state; //these components that are just pure functions can just render\n    //we use the filter function to iterate over robots array which is in state\n    //return all robots that match SearchBox input which is in this.state.searchfield\n    //filter robot state to include what's in the searchfield\n    //and we pass filtered robots instead\n    //is an array\n    //we destructured into robots and searchfield but it can also be this.state.robots and this.state.searchfield\n    //this is cleaner\n\n    const filteredRobots = robots.filter(robot => {\n      //each item we filter through is a robot but can be any word\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    console.log(\"render\"); //render() will run anytime there is a change in state which triggers an update\n    //it goes from an empty array to having the state set with robots list\n    //everytime there is an onChange on the input of SearchBox it let's the App.js know to run the onSearchChange function\n    //then updates the state of the searchfield to whatever we typed\n\n    if (this.state.robots.length === 0) {\n      //if the fetch is taking a long time to get the list we can show a loading h1 when the list is empty or 0\n      //this could be a loading bar in a real app\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 20\n        }\n      }, \"Loading\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tc\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"f1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, \"RoboFriends\"), /*#__PURE__*/React.createElement(SearchBox, {\n        searchChange: this.onSearchChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Scroll, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CardList, {\n        robots: filteredRobots,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }\n      })));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/awoodrow/React Projects/robofriends/src/containers/App.js"],"names":["React","Component","CardList","SearchBox","Scroll","App","constructor","onSearchChange","event","console","log","target","value","setState","searchfield","state","robots","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AACxBK,EAAAA,WAAW,GAAG;AACV,YADU,CACF;;AADE,SA2BdC,cA3Bc,GA2BIC,KAAD,IAAW;AACxB;AACA;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB,EALwB,CAMxB;;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAEN,KAAK,CAACG,MAAN,CAAaC;AAA3B,OAAd;AACH,KAnCa;;AAEV,SAAKG,KAAL,GAAa;AACT;AACIC,MAAAA,MAAM,EAAE,EAFH;AAGLF,MAAAA,WAAW,EAAE;AAHR,KAAb;AAKAL,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAPU,CAQV;AACA;AACA;AACA;AACH;;AAEDO,EAAAA,iBAAiB,GAAG;AAChB;AACA;AACA;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADrB,EAEKF,IAFL,CAEUG,KAAK,IAAI,KAAKT,QAAL,CAAc;AAAEG,MAAAA,MAAM,EAAEM;AAAV,KAAd,CAFnB,EAJgB,CAOhB;AACA;AACA;;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;;AAWD;AACA;AAEA;AACA;AACAa,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEP,MAAAA,MAAF;AAAUF,MAAAA;AAAV,QAA0B,KAAKC,KAArC,CAFK,CAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMS,cAAc,GAAGR,MAAM,CAACS,MAAP,CAAcC,KAAK,IAAE;AACxC;AACA,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCf,WAAW,CAACc,WAAZ,EAAlC,CAAP;AACH,KAHsB,CAAvB;AAIAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAfK,CAgBL;AACA;AACA;AACA;;AACA,QAAG,KAAKK,KAAL,CAAWC,MAAX,CAAkBc,MAAlB,KAA6B,CAAhC,EAAkC;AAC9B;AACA;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACH,KAJD,MAIO;AACH,0BACI;AAAK,QAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAI,QAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKvB,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAEiB,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAHJ,CADJ;AASH;AACJ;;AA7EuB;;AAgF5B,eAAenB,GAAf","sourcesContent":["import React, {Component} from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\"\nimport \"./App.css\"\n\n//Needs to be a class and extend Component when dealing with state\n//in a non-state component you just return something\n//in a stateful component you render something\n//any component using state has the class syntax\n//what we call a smart component since it uses state\nclass App extends Component {\n    constructor() {\n        super();//calls the constructor of component\n        this.state = {\n            //two states: robots and searchfield\n                robots: [],\n                searchfield: ''\n        };\n        console.log(\"constructor\");\n        //these are the things that can change within our app\n        //usually live in the parent component\n        //state is passed down as props to components\n        //the state is passed down as props to CardList\n    }\n\n    componentDidMount() {\n        //no arrow function because this method is part of react\n        //robots from javascript file\n        //we can fetch the user list from this url and set the state of robots to this list\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(users => this.setState({ robots: users }));\n        //we set te state of robots to the users list from the url\n        //fetch is a method on the window object and comes with all browsers\n        //window.fetch in browser console\n        console.log(\"componentDidMount\");\n    }\n\n    onSearchChange = (event) => {\n        //anytime you make your own methods on a component use arrow function\n        //without the arrow function this would refer to the input where the event takes place\n        //makes sure the this value refers to where it was created; App in this case\n        //with the event we always have event.target.value\n        console.log(event.target.value);\n        //this is how we set state\n        this.setState({searchfield: event.target.value});\n    };\n    //anytime input changes we set the state of where the event was triggered\n    //which is SearchBox.js input\n\n    //always has a render function that has to return something\n    //you have to use this.onSearchChange since this is an object\n    render() {\n        //we can destructure this.state and just refer to robots and searchfield\n        const { robots, searchfield } = this.state;\n        //these components that are just pure functions can just render\n        //we use the filter function to iterate over robots array which is in state\n        //return all robots that match SearchBox input which is in this.state.searchfield\n        //filter robot state to include what's in the searchfield\n        //and we pass filtered robots instead\n        //is an array\n        //we destructured into robots and searchfield but it can also be this.state.robots and this.state.searchfield\n        //this is cleaner\n        const filteredRobots = robots.filter(robot=>{\n            //each item we filter through is a robot but can be any word\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        console.log(\"render\");\n        //render() will run anytime there is a change in state which triggers an update\n        //it goes from an empty array to having the state set with robots list\n        //everytime there is an onChange on the input of SearchBox it let's the App.js know to run the onSearchChange function\n        //then updates the state of the searchfield to whatever we typed\n        if(this.state.robots.length === 0){\n            //if the fetch is taking a long time to get the list we can show a loading h1 when the list is empty or 0\n            //this could be a loading bar in a real app\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}