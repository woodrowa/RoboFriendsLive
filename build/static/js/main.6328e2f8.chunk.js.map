{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","console","log","target","value","setState","searchfield","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOA6BeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,MCCLK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GAGd,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBY,SAAUL,EAAOG,GAAGE,SACpBX,MAAOM,EAAOG,GAAGT,aCD1BY,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCMXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCiFJC,G,wDA/EX,aAAe,IAAD,8BACV,gBA0BJC,eAAiB,SAACC,GAKdC,QAAQC,IAAIF,EAAMG,OAAOC,OAEzB,EAAKC,SAAS,CAACC,YAAaN,EAAMG,OAAOC,SAhCzC,EAAKG,MAAQ,CAEL3B,OAAQ,GACR0B,YAAa,IAErBL,QAAQC,IAAI,eAPF,E,gEAcO,IAAD,OAIhBM,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEzB,OAAQgC,OAI3CX,QAAQC,IAAI,uB,+BAiBP,MAE2BW,KAAKN,MAA7B3B,EAFH,EAEGA,OAAQ0B,EAFX,EAEWA,YASVQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GAEjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAOzD,OALAhB,QAAQC,IAAI,UAKoB,IAA7BW,KAAKN,MAAM3B,OAAOuC,OAGV,uCAGH,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAc0B,KAAKd,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAAQkC,U,GAxExBM,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.6328e2f8.chunk.js","sourcesContent":["import React from 'react';\n\n// const Card = (props) => {\n//     return (\n//        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n//            <img src={`https://robohash.org/${props.id}?200x200`} alt='robots'/>\n//             <div>\n//                 <h2>{props.name}</h2>\n//                 <p>{props.email}</p>\n//             </div>\n//        </div>\n//     );\n// };\n//can only return one thing\n\n//same as the top\nconst Card = ({ name, email, id }) => {\n    //this is destructuring the props\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n//you have to export the file to use in other files\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    //more efficient way to pass props down\n    return(\n        <div>\n            {\n                robots.map((user, i)=> {\n                    //when you iterate over an array react needs a key property to keep track\n                    //user can be any word\n                    return <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        username={robots[i].username}\n                        email={robots[i].email}\n                    />\n                })\n            }\n        </div>\n    )\n};\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search Robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n};\n\nexport default SearchBox;","import React from \"react\";\n\n//Scroll can use children as a way to render its children\n//every props object has children\n//using props.children we can create components that wrap other custom components\n//in jsx you can add styles using double curly brackets {{}}\n//which is a javascript expression which returns an object can have css styles\nconst Scroll = (props) =>{\n    return (\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, {Component} from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\"\nimport \"./App.css\"\n\n//Needs to be a class and extend Component when dealing with state\n//in a non-state component you just return something\n//in a stateful component you render something\n//any component using state has the class syntax\n//what we call a smart component since it uses state\nclass App extends Component {\n    constructor() {\n        super();//calls the constructor of component\n        this.state = {\n            //two states: robots and searchfield\n                robots: [],\n                searchfield: ''\n        };\n        console.log(\"constructor\");\n        //these are the things that can change within our app\n        //usually live in the parent component\n        //state is passed down as props to components\n        //the state is passed down as props to CardList\n    }\n\n    componentDidMount() {\n        //no arrow function because this method is part of react\n        //robots from javascript file\n        //we can fetch the user list from this url and set the state of robots to this list\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(users => this.setState({ robots: users }));\n        //we set te state of robots to the users list from the url\n        //fetch is a method on the window object and comes with all browsers\n        //window.fetch in browser console\n        console.log(\"componentDidMount\");\n    }\n\n    onSearchChange = (event) => {\n        //anytime you make your own methods on a component use arrow function\n        //without the arrow function this would refer to the input where the event takes place\n        //makes sure the this value refers to where it was created; App in this case\n        //with the event we always have event.target.value\n        console.log(event.target.value);\n        //this is how we set state\n        this.setState({searchfield: event.target.value});\n    };\n    //anytime input changes we set the state of where the event was triggered\n    //which is SearchBox.js input\n\n    //always has a render function that has to return something\n    //you have to use this.onSearchChange since this is an object\n    render() {\n        //we can destructure this.state and just refer to robots and searchfield\n        const { robots, searchfield } = this.state;\n        //these components that are just pure functions can just render\n        //we use the filter function to iterate over robots array which is in state\n        //return all robots that match SearchBox input which is in this.state.searchfield\n        //filter robot state to include what's in the searchfield\n        //and we pass filtered robots instead\n        //is an array\n        //we destructured into robots and searchfield but it can also be this.state.robots and this.state.searchfield\n        //this is cleaner\n        const filteredRobots = robots.filter(robot=>{\n            //each item we filter through is a robot but can be any word\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        console.log(\"render\");\n        //render() will run anytime there is a change in state which triggers an update\n        //it goes from an empty array to having the state set with robots list\n        //everytime there is an onChange on the input of SearchBox it let's the App.js know to run the onSearchChange function\n        //then updates the state of the searchfield to whatever we typed\n        if(this.state.robots.length === 0){\n            //if the fetch is taking a long time to get the list we can show a loading h1 when the list is empty or 0\n            //this could be a loading bar in a real app\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//we have to destructure the files that aren't export default\n//would be import { robots, cats } from \"./robots\" if more than one variable in the file\n//import { robots } from \"./robots\" is moved to app.js\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n//can only return one thing\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}